<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<task:annotation-driven/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/assets/**" location="/resources/assets/" />
  
	<!-- 
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	 -->
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3" />
	</beans:bean>
	
	<!-- UrlBasedViewResolver 클래스를 Spring Bean으로 등록 -->
	<!-- UrlBasedViewResolver 객체 : 클라이언트 요청에 의해 호출되는 요청 처리 메소드의 반환값(ViewName)을
	Spring 프레임워크에서 제공하는 ViewResolver 객체가 아닌 외부의 ViewResolver 객체로 응답 처리하기
	위한 기능을 제공하는 객체 -->
	<!-- => 뷰이름으로 응답 처리하기 위한 뷰를 커스터마이징(Customizing) 할 때 사용하는 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 뷰 기능을 제공하기 위한 클래스(TilesView)가 저장되도록 값 주입 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 객체의 우선순위를 설정하기 위한 정수값 주입 -->
		<!-- => 다수의 ViewResolver 객체가 있는 경우 반드시 우선순위를 설정  -->
		<!-- => 필드에 저장된 정수값이 작을수록 우선순위가 높게 설정 -->
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- TilesConfigurer 클래스를 Spring Bean으로 등록 -->
	<!-- TilesConfigurer 객체 : TilesView 클래스가 응답 처리하기 위한 정보를 얻기 위한 
	환경설정파일을 제공하기 위한 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 List 객체를 생성하여 의존성 주입 -->
		<!-- => List 객체의 요소에 TilesView 클래스의 환경설정파일의 경로를 저장하여 제공 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- BeanNameViewResolver 클래스를 Spring Bean으로 등록 -->
	<!-- BeanNameViewResolver 객체 : 요청 처리 메소드에서 반환되는 문자열(ViewName)과 같은 이름의 
	식별자(beanName)를 가진 객체(Spring Bean)로 실행 메소드를 호출하여 클라이언트에게 응답 처리 -->
	<!-- => JSP 문서를 이용하여 응답 처리하지 않고 메소드의 명령을 실행하여 응답 처리 -->
	<!-- => JSP 문서로 응답 처리하는 ViewResolver 객체보다 반드시 우선순위를 높게 설정 --> 
 	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
 		<beans:property name="order" value="1"/>
 	</beans:bean>


	<context:component-scan
      base-package="com.moyeo.controller" />
   <context:component-scan
      base-package="com.moyeo.auth" />
   <context:component-scan
      base-package="com.moyeo.dao" />
      <context:component-scan
      base-package="com.moyeo.repository" />
   <context:component-scan
      base-package="com.moyeo.service" />
		
	<!-- interceptors : interceptor 엘리먼트를 등록하기 위한 엘리먼트 -->
	<!-- <interceptors> -->
		<!-- interceptor : 인터셉터 기능을 제공받기 위한 규칙을 설정하는 엘리먼트 -->
		<!-- <interceptor> -->
			<!-- mapping : 인터셉터가 실행될 페이지의 요청 URL 주소를 설정하는 엘리먼트  -->
			<!-- path 속성 : 요청 처리 메소드가 호출될 페이지의 요청 URL 주소를 속성값으로 설정 -->
			<!-- 
			<mapping path="/userinfo/write"/>
			<mapping path="/userinfo/modify"/>
			<mapping path="/userinfo/remove"/>
			 -->
			<!-- ref : 인터셉터 기능을 제공할 객체(Spring Bean)을 설정하기 위한 엘리먼트 -->
			<!-- bean 속성 : Interceptor 클래스의 Spring Bean의 식별자(beanName)를 속성값으로 설정 -->
			<!-- <beans:ref bean="adminAuthInterceptor"/> -->
		<!-- </interceptor> -->
		
		<!-- <interceptor> -->
			<!--
			<mapping path="/userinfo/list"/>
			<mapping path="/userinfo/view"/>
			<beans:ref bean="loginAuthInterceptor"/>
			--> 
		
			<!-- mapping 엘리먼트의 path 속 성값으로 [*] 패턴문자를 사용하여 요청 URL 주소 설정 -->
			<!-- => [*] : 폴더의 모든 페이지를 요청한 경우  -->
			<!-- => [**] : 폴더 및 하위 폴더의 모든 페이지를 요청한 경우  -->
			<!-- <mapping path="/*"/> -->
			<!-- <mapping path="/**"/> -->
			<!-- <mapping path="/userinfo/*"/> -->
			<!-- exclude-mapping : 인터셉터가 실행되지 않는 페이지의 요청 URL 주소를 설정하는 엘리먼트 -->
			<!-- <exclude-mapping path="/userinfo/login"/> -->
			<!-- <beans:ref bean="loginAuthInterceptor"/> -->
		<!-- </interceptor> -->
	<!-- </interceptors> -->
	
		<!-- 파일 업로드 처리 기능을 제공하는 클래스를 Spring Bean으로 등록  -->
			<!-- => Spring Bean의 식별자(beanName)를 반드시 [multipartResolver]로 설정 -->
			<!-- <beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
				<beans:property name="maxUploadSize" value="20971520"/>
				<beans:property name="defaultEncoding" value="utf-8"/>
			</beans:bean> -->
				
			
			<!-- 파일 다운로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
			<!-- => Spring Bean의 식별자(beanName)을 반드시 요청 처리 메소드의 반환값과 같도록 작성 -->
			<beans:bean class="com.moyeo.util.FileDownload" id="fileDownload"/>	
		</beans:beans>